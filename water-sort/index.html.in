<!doctype html>
<title>Water Sort</title>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width">
<style>
html, body {
    background: #222222;
    font-family: sans-serif;
    height: 100%;
    margin: 0;
    overflow: hidden;
    text-align: center;
    width: 100%;
}
h1 {
    color: white;
    margin: 0;
}
button {
    font-size: 150%;
    height: 8%;
    margin: 0.3em;
    width: 25%;
}
</style>

<canvas></canvas>
<h1 id="title"></h1>
<button id="reset">reset</button>
<button id="hint">hint</button>
<button id="undo">undo</button>
<br/>
<button id="prev">prev</button>
<button id="next">next</button>

<script>
const INPUT_NONE  = 0
const INPUT_CLICK = 1
const INPUT_HINT  = 2
const INPUT_RESET = 3
const INPUT_UNDO  = 4

const DRAW_BOX  = 0
const DRAW_FILL = 1

const SEEDS = [
#include "seeds.txt"
]

const WASM =
#include "water-sort.wasm.b64"

function webgl_renderer(gl) {
    let ext = gl.getExtension("ANGLE_instanced_arrays")

    let program = gl.createProgram()
    let vert    = gl.createShader(gl.VERTEX_SHADER)
    let frag    = gl.createShader(gl.FRAGMENT_SHADER)
    gl.shaderSource(vert, `
        precision mediump float;
        uniform   vec2 u_dims;
        attribute vec2 a_point;
        attribute vec3 a_color;
        attribute vec4 a_xywh;
        varying   vec3 v_color;
        void main() {
            vec2 point = a_point;
            point = point*a_xywh.zw + a_xywh.xy;
            point = (point/u_dims - 0.5) * vec2(2, -2);
            v_color = a_color;
            gl_Position = vec4(point, 0, 1);
        }
    `)
    gl.shaderSource(frag, `
        precision mediump float;
        varying vec3 v_color;
        void main() {
            gl_FragColor = vec4(v_color, 1);
        }
    `)
    gl.compileShader(vert)
    gl.compileShader(frag)
    gl.attachShader(program, vert)
    gl.attachShader(program, frag)
    gl.linkProgram(program)
    gl.useProgram(program)

    let a_point = gl.getAttribLocation(program, "a_point")
    let a_color = gl.getAttribLocation(program, "a_color")
    let a_xywh  = gl.getAttribLocation(program, "a_xywh")
    let u_dims  = gl.getUniformLocation(program, "u_dims")

    let rect = gl.createBuffer()
    gl.bindBuffer(gl.ARRAY_BUFFER, rect)
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
        0,0, 1,0, 0,1, 1,1
    ]), gl.STATIC_DRAW)
    gl.enableVertexAttribArray(a_point)
    gl.vertexAttribPointer(a_point, 2, gl.FLOAT, false, 0, 0)

    let strip = gl.createBuffer()
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, strip)
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Int8Array([
        0, 1, 2, 3  // GL_TRIANGLE_STRIP order
    ]), gl.STATIC_DRAW)

    let lines = gl.createBuffer()
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, lines)
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Int8Array([
        0, 1, 3, 2  // GL_LINE_LOOP order
    ]), gl.STATIC_DRAW)

    let rects = gl.createBuffer()
    gl.bindBuffer(gl.ARRAY_BUFFER, rects)
    gl.enableVertexAttribArray(a_color)
    gl.enableVertexAttribArray(a_xywh)
    gl.vertexAttribPointer(a_color, 3, gl.FLOAT, false, 4*7, 4*0)
    gl.vertexAttribPointer(a_xywh,  4, gl.FLOAT, false, 4*7, 4*3)

    return function(ops) {
        let len = ops.byteLength / 24

        let fillcount = 0
        let fillattrs = new Float32Array(len * 7)
        let boxcount  = 0
        let boxattrs  = new Float32Array(len * 7)
        function push(attrs, n, r, g, b, x, y, w, h) {
            attrs[n*7 + 0] = r
            attrs[n*7 + 1] = g
            attrs[n*7 + 2] = b
            attrs[n*7 + 3] = x
            attrs[n*7 + 4] = y
            attrs[n*7 + 5] = w
            attrs[n*7 + 6] = h
        }

        for (let i = 0; i < len; i++) {
            let mode = ops.getInt32(24*i +  0, true)
            let rgb  = ops.getInt32(24*i +  4, true)
            let x    = ops.getInt32(24*i +  8, true)
            let y    = ops.getInt32(24*i + 12, true)
            let w    = ops.getInt32(24*i + 16, true)
            let h    = ops.getInt32(24*i + 20, true)
            let r    = (rgb>>16 & 0xff) / 255.0
            let g    = (rgb>> 8 & 0xff) / 255.0
            let b    = (rgb>> 0 & 0xff) / 255.0
            switch (mode) {
            case DRAW_BOX:
                push(boxattrs,  boxcount++,  r, g, b, x, y, w-1, h-1)
                break
            case DRAW_FILL:
                push(fillattrs, fillcount++, r, g, b, x, y, w,   h  )
                break
            }
        }

        let width  = gl.drawingBufferWidth
        let height = gl.drawingBufferHeight
        gl.viewport(0, 0, width, height)
        gl.uniform2f(u_dims, width, height)

        gl.bindBuffer(gl.ARRAY_BUFFER, rects)
        gl.bufferData(gl.ARRAY_BUFFER, fillattrs, gl.STREAM_DRAW)
        ext.vertexAttribDivisorANGLE(a_color, 2)
        ext.vertexAttribDivisorANGLE(a_xywh,  2)
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, strip)
        ext.drawElementsInstancedANGLE(
            gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_BYTE, 0, fillcount*2
        )

        gl.bindBuffer(gl.ARRAY_BUFFER, rects)
        gl.bufferData(gl.ARRAY_BUFFER, boxattrs,  gl.STREAM_DRAW)
        ext.vertexAttribDivisorANGLE(a_color, 4)
        ext.vertexAttribDivisorANGLE(a_xywh,  4)
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, lines)
        ext.drawElementsInstancedANGLE(
            gl.LINE_LOOP, 4, gl.UNSIGNED_BYTE, 0, boxcount*4
        )
    }
}

function canvas_renderer(canvas) {
    let ctx = canvas.getContext("2d")
    return function(ops) {
        let len = ops.byteLength / 24
        for (let i = 0; i < len; i++) {
            let mode  = ops.getInt32(24*i +  0, true)
            let rgb   = ops.getInt32(24*i +  4, true)
            let x     = ops.getInt32(24*i +  8, true)
            let y     = ops.getInt32(24*i + 12, true)
            let w     = ops.getInt32(24*i + 16, true)
            let h     = ops.getInt32(24*i + 20, true)
            let style = `#${rgb.toString(16).padStart(6, "0")}`
            switch (mode) {
            case DRAW_BOX:
                ctx.strokeStyle = style
                ctx.strokeRect(x, y, w, h)
                break
            case DRAW_FILL:
                ctx.fillStyle = style
                ctx.fillRect(x, y, w, h)
                break
            }
        }
    }
}

async function main() {
    let bytes   = Uint8Array.from(atob(WASM), function(c) {
        return c.charCodeAt(0)
    })
    let module  = await WebAssembly.compile(bytes)
    let wasm    = await WebAssembly.instantiate(module)
    let exports = wasm.exports
    let html    = document.querySelector("html")
    let title   = document.querySelector("#title")
    let canvas  = document.querySelector("canvas")
    let memory  = exports.memory
    let start   = Date.now()
    let mousex  = -1
    let mousey  = -1

    let renderer = null
    let gl = canvas.getContext("webgl")
    if (gl != null) {
        renderer = webgl_renderer(gl)
    } else {
        renderer = canvas_renderer(canvas)
        document.title += " (canvas)"
    }

    function now() {
        return Date.now() - start
    }

    function min(a, b) {
        return b<a ? b : a
    }

    function max_width() {
        return html.clientHeight * 0.7 | 0
    }

    function render() {
        let width  = canvas.width  = min(html.clientWidth, max_width())
        let height = canvas.height = width
        let ptr    = exports.game_render(width, height, mousex, mousey)
        let dl     = new DataView(memory.buffer, ptr)
        let active = dl.getInt32(0, true)
        let len    = dl.getInt32(4, true)

        let ops = new DataView(memory.buffer, ptr+8, 24*len)
        renderer(ops)

        if (active >= 0) {
            canvas.style.cursor = "pointer"
        } else {
            canvas.style.cursor = "auto"
        }
    }

    function onresize() { html.style.maxWidth = `${max_width()}px` }
    window.addEventListener("resize", onresize)
    onresize()

    canvas.addEventListener("mousemove", function(e) {
        mousex = e.clientX
        mousey = e.clientY
    })

    canvas.addEventListener("contextmenu", function(e) {
        e.preventDefault()
    })

    canvas.addEventListener("mousedown", function(e) {
        mousex = e.clientX
        mousey = e.clientY
        switch (e.button) {
        case 0: exports.game_update(INPUT_CLICK, mousex, mousey, now())
                break
        case 1: exports.game_update(INPUT_HINT, mousex, mousey, now())
                break
        case 2: exports.game_update(INPUT_UNDO, mousex, mousey, now())
                break
        }
    })

    document.addEventListener("keydown", function(e) {
        if (e.key == "u") {
            exports.game_update(INPUT_UNDO, mousex, mousey, now())
        } else if (e.key == "h") {
            exports.game_update(INPUT_HINT, mousex, mousey, now())
        } else if (e.key == "r") {
            exports.game_update(INPUT_RESET, mousex, mousey, now())
        }
    })

    document.querySelector("#reset").addEventListener("click", function(e) {
        exports.game_update(INPUT_RESET, mousex, mousey, now())
    })
    document.querySelector("#hint").addEventListener("click", function(e) {
        exports.game_update(INPUT_HINT, mousex, mousey, now())
    })
    document.querySelector("#undo").addEventListener("click", function(e) {
        exports.game_update(INPUT_UNDO, mousex, mousey, now())
    })

    function getlevel() {
        let level = localStorage["level"]
        return level ? parseFloat(level) : 0
    }

    function settitle(level) {
        title.textContent = `puzzle ${level+1}`
    }

    function setlevel(level) {
        localStorage["level"] = level
        exports.game_init(SEEDS[level])
        settitle(level)
    }

    document.querySelector("#prev").addEventListener("click", function(e) {
        let level = getlevel()
        level = (level + SEEDS.length - 1) % SEEDS.length
        setlevel(level)
    })
    document.querySelector("#next").addEventListener("click", function(e) {
        let level = getlevel()
        level = (level + 1) % SEEDS.length
        setlevel(level)
    })

    canvas.addEventListener("touchstart", function(e) {
        e.preventDefault()
        let touch = e.touches[e.touches.length - 1]
        mousex = touch.clientX
        mousey = touch.clientY
    })
    canvas.addEventListener("touchmove", function(e) {
        e.preventDefault()
        let touch = e.touches[e.touches.length - 1]
        mousex = touch.clientX
        mousey = touch.clientY
    })
    canvas.addEventListener("touchend", function(e) {
        e.preventDefault()
        if (mousex>=0 && mousey>=0) {
            exports.game_update(INPUT_CLICK, mousex, mousey, now())
        }
        mousex = mousey = -1
    })

    let running = true
    function animate() {
        // TODO: stop requesting frames when state is static
        request = requestAnimationFrame(animate)
        if (running) {
            exports.game_update(INPUT_NONE, mousex, mousey, now())
            render()
        }
    }
    requestAnimationFrame(animate)

    canvas.addEventListener("webglcontextlost", function(e) {
        e.preventDefault()
        running = false
    })
    canvas.addEventListener("webglcontextrestored", function(e) {
        renderer = webgl_renderer(gl)
        running = true
    })

    setlevel(getlevel())
}

main()
</script>
